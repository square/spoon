apply plugin: 'com.android.application'

android {
  compileSdkVersion versions.compileSdk
  buildToolsVersion versions.buildTools

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_7
    targetCompatibility JavaVersion.VERSION_1_7
  }

  lintOptions {
    textReport true
    textOutput 'stdout'
  }

  defaultConfig {
    minSdkVersion versions.minSdk
    targetSdkVersion versions.compileSdk

    applicationId 'com.example.boxup.bucks'
    versionCode 1
    versionName version

    testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
  }
}

configurations {
  spoon
}

dependencies {
  compile deps.support.annotations
  compile deps.support.appCompat
  compile deps.support.design
  compile deps.support.constraintLayout
  compile deps.butterknife.runtime
  annotationProcessor deps.butterknife.compiler

  spoon project(':spoon-runner')

  androidTestImplementation deps.junit
  androidTestImplementation deps.truth
  androidTestImplementation deps.support.test.runner
  androidTestImplementation deps.support.test.rules
  androidTestImplementation deps.support.test.espresso
  androidTestImplementation deps.support.test.espressoContrib
  androidTestImplementation project(':spoon-client')
}

def spoonTest = tasks.create("spoonAndroidTest") {
  group = JavaBasePlugin.VERIFICATION_GROUP
  description = "Installs and runs instrumentation tests for all flavors with Spoon."
}

android.testVariants.all { testVariant ->
  def testVariantOutputs = testVariant.outputs
  if (testVariantOutputs.size() != 1) {
    throw new AssertionError()
  }
  def task = tasks.create("spoon${testVariant.name.capitalize()}", JavaExec) {
    dependsOn(testVariant.testedVariant.assemble, testVariantOutputs[0].assemble)
    group = JavaBasePlugin.VERIFICATION_GROUP
    description = "Installs and runs the instrumentation tests for ${testVariant.testedVariant.name} with Spoon."

    doFirst {
      def outputDir = "$buildDir/outputs/reports/spoon"
      def variantOutputs = testVariant.testedVariant.outputs
      if (variantOutputs.size() != 1) {
        throw new AssertionError()
      }
      args = [
        testVariantOutputs[0].outputFile,
        variantOutputs[0].outputFile,
        '--output', outputDir,
        '--debug',
        '--record-video'
      ]
      logger.info("Spoon args: $args")
    }

    doLast {
      def outputDir = "$buildDir/outputs/reports/spoon"
      logger.lifecycle("Spoon report written to $outputDir/index.html")
    }

    classpath = configurations.spoon
    main = 'com.squareup.spoon.Main'
  }
  spoonTest.dependsOn(task)
}
